
load("//:plugin.bzl", "proto_plugin")

proto_plugin(
    name = "scala",
    # Use the proto basename and pipe the value to the scala_keyword function.
    # Ths function will append '_pb' if the basename is a scala keyword.
    out = "{name}.jar",
    tool = ":protoc-gen-scala",
    visibility = ["//visibility:public"],
)

proto_plugin(
    name = "grpc_scala",
    # Use the proto basename and pipe the value to the scala_keyword function.
    # Ths function will append '_pb' if the basename is a scala keyword.
    out = "{name}.jar",
    options = [
        "grpc", 
        #"java_conversions", # causes weird import problems 
    ],
    tool = ":protoc-gen-scala",
    visibility = ["//visibility:public"],
)

java_library(
    name = "proto_deps",
    exports = [
        "@io_bazel_rules_scala/dependency/proto/scalapb_runtime",
        "@io_bazel_rules_scala/dependency/com_google_protobuf/protobuf_java",
        "@io_bazel_rules_scala/dependency/proto/scalapb_lenses",
        "@io_bazel_rules_scala/dependency/proto/scalapb_fastparse",
    ],
    visibility = ["//visibility:public"],
)

java_library(
    name = "grpc_deps",
    exports = [
        ":proto_deps",
        "@io_bazel_rules_scala/dependency/proto/scalapb_runtime_grpc",
        "@io_bazel_rules_scala/dependency/proto/grpc_core",
        "@io_bazel_rules_scala/dependency/proto/grpc_stub",
        "@io_bazel_rules_scala/dependency/proto/grpc_protobuf",
        "@io_bazel_rules_scala/dependency/proto/grpc_netty",
        "@io_bazel_rules_scala/dependency/proto/grpc_context",
        "@io_bazel_rules_scala/dependency/proto/guava",
        "@io_bazel_rules_scala/dependency/proto/google_instrumentation",
        "@io_bazel_rules_scala/dependency/proto/netty_codec",
        "@io_bazel_rules_scala/dependency/proto/netty_codec_http",
        "@io_bazel_rules_scala/dependency/proto/netty_codec_http2",
        "@io_bazel_rules_scala/dependency/proto/netty_codec_socks",
        "@io_bazel_rules_scala/dependency/proto/netty_handler",
        "@io_bazel_rules_scala/dependency/proto/netty_buffer",
        "@io_bazel_rules_scala/dependency/proto/netty_transport",
        "@io_bazel_rules_scala/dependency/proto/netty_resolver",
        "@io_bazel_rules_scala/dependency/proto/netty_common",
        "@io_bazel_rules_scala/dependency/proto/netty_handler_proxy",
    ],
    visibility = ["//visibility:public"],
)

load("@io_bazel_rules_scala//scala:scala.bzl", "scala_library", "scala_binary", "scala_test")

scala_binary(
    name = "compiler_plugin",
    main_class = "CompilerPlugin",
    srcs = ["CompilerPlugin.scala"],
    deps = [
        "@com_google_protobuf//:protobuf_java",
        "@com_github_scalapb_scalapb//:compilerplugin",
    ],
    runtime_deps = [
        "@com_github_scalapb_scalapb//:scala-library",
    ],
    visibility = ["//visibility:public"],
)

# Curiously this didn't work
#
# genrule(
#     name = "gen_protoc_gen_scala",
#     srcs = ["compiler_plugin_deploy.jar", "@local_jdk//:bin/java"],
#     outs = ["protoc-gen-scala.sh"],
#     cmd = """
#     echo '$(location @local_jdk//:bin/java) -jar $(location protoc_gen_deploy.jar) $$@' > $@
#     """, 
#     executable = True,
# )

# ======================================================================
#
# Unable to get either bazel or maybe protoc to call a plugin whose
# implementation was fronted by a shell script (from a genrule).  So, the only
# way this seemed to work was compile an executable that calls 'java -jar
# protoc_gen_scala_deploy.jar'.  Either figure out how to do this in java
# directly or write the wrapper in C++ ot remove the go dependency here.
#
load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")

go_library(
    name = "go_default_library",
    srcs = [
        "protoc-gen-scala.go",
    ],
    importpath = "github.com/stackb/rules_proto/scala/protoc-gen-scala",
    visibility = ["//visibility:public"],
)

go_binary(
    name = "protoc-gen-scala",
    embed = [":go_default_library"],
    visibility = ["//visibility:public"],
    data = [
        ":compiler_plugin_deploy.jar",
        "@bazel_tools//tools/jdk:jre",
    ],
)