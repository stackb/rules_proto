package gomodules

import (
	"flag"
	"log"
	"os"

	"github.com/bazelbuild/bazel-gazelle/config"
	"github.com/bazelbuild/bazel-gazelle/label"
	"github.com/bazelbuild/bazel-gazelle/language"
	"github.com/bazelbuild/bazel-gazelle/repo"
	"github.com/bazelbuild/bazel-gazelle/resolve"
	"github.com/bazelbuild/bazel-gazelle/rule"
)

const (
	targetDirDirective = "gomodules_target_dir"
	goVersionDirective = "gomodules_go_version"
)

type Config interface {
	TargetPkg() string
	LoadName() string
	GoVersion() string
}

func NewLanguage() language.Language {
	return NewGoModulesLanguage("gomodules")
}

// NewGoModulesLanguage create a new GoModulesLanguage Gazelle extension
// implementation.
func NewGoModulesLanguage(name string) *GoModulesLanguage {
	log.Println("NewLanguage!!!!!!!!!", name)
	return &GoModulesLanguage{
		name: name,
	}
}

// GoModulesLanguage implements language.Language.
type GoModulesLanguage struct {
	name      string
	loadName  string
	targetPkg string
	goVersion string
	goModule  *goModule
	goModules *goModules
}

func (l GoModulesLanguage) LoadName() string {
	return l.loadName
}

func (l GoModulesLanguage) TargetPkg() string {
	return l.targetPkg
}

func (l GoModulesLanguage) GoVersion() string {
	return l.goVersion
}

// Name returns the name of the language. This should be a prefix of the kinds
// of rules generated by the language, e.g., "go" for the Go extension since it
// generates "go_library" rules.
func (l *GoModulesLanguage) Name() string { return l.name }

// The following methods are implemented to satisfy the
// https://pkg.go.dev/github.com/bazelbuild/bazel-gazelle/resolve?tab=doc#Resolver
// interface, but are otherwise unused.
func (l *GoModulesLanguage) RegisterFlags(fs *flag.FlagSet, cmd string, c *config.Config) {
	log.Printf("%s: register flags: args=%v", l.name, os.Args)

	fs.StringVar(&l.loadName, "gomodules-load-name", "@build_stack_rules_proto//rules/go:module.bzl", "Load source for the go_module and go_modules rule symbols")
	fs.StringVar(&l.targetPkg, "gomodules-target-package", "", "Package name where go_modules aggregate rule should be generated")
}

func (l *GoModulesLanguage) CheckFlags(fs *flag.FlagSet, c *config.Config) error {
	l.goModule = newGoModule(l)
	l.goModules = newGoModules(l)
	return nil
}

func (*GoModulesLanguage) KnownDirectives() []string {
	return []string{targetDirDirective, goVersionDirective}
}

// Configure implements config.Configurer
func (l *GoModulesLanguage) Configure(c *config.Config, rel string, f *rule.File) {
	if f == nil {
		log.Printf("%s: skipping configure: rel=%s", l.name, rel)
		return
	}
	log.Printf("%s: configure: rel=%s", l.name, rel)
	for _, d := range f.Directives {
		if d.Key == targetDirDirective && d.Value != "" {
			l.targetPkg = d.Value
		} else if d.Key == goVersionDirective {
			l.goVersion = d.Value
		}
	}
	log.Printf("%s: targetPkg: %s", l.name, l.targetPkg)
	log.Printf("%s: goVersion: %s", l.name, l.goVersion)
}

// Kinds returns a map of maps rule names (kinds) and information on how to
// match and merge attributes that may be found in rules of those kinds. All
// kinds of rules generated for this language may be found here.
func (l *GoModulesLanguage) Kinds() map[string]rule.KindInfo {
	kinds := map[string]rule.KindInfo{
		l.goModule.kind():  l.goModule.kindInfo(),
		l.goModules.kind(): l.goModules.kindInfo(),
	}
	return kinds

}

// Loads returns .bzl files and symbols they define. Every rule generated by
// GenerateRules, now or in the past, should be loadable from one of these
// files.
func (l *GoModulesLanguage) Loads() []rule.LoadInfo {
	return []rule.LoadInfo{
		l.goModule.loadInfo(),
		l.goModules.loadInfo(),
	}
}

// ApparentLoads implements the optional interface language.ModuleAwareLanguage
func (l *GoModulesLanguage) ApparentLoads(moduleToApparentName func(string) string) []rule.LoadInfo {
	return []rule.LoadInfo{
		l.goModule.loadInfo(),
		l.goModules.loadInfo(),
	}
}

// Fix repairs deprecated usage of language-specific rules in f. This is called
// before the file is indexed. Unless c.ShouldFix is true, fixes that delete or
// rename rules should not be performed.
func (*GoModulesLanguage) Fix(c *config.Config, f *rule.File) {}

// Imports returns a list of ImportSpecs that can be used to import the rule r.
// This is used to populate RuleIndex.
//
// If nil is returned, the rule will not be indexed. If any non-nil slice is
// returned, including an empty slice, the rule will be indexed.
func (l *GoModulesLanguage) Imports(c *config.Config, r *rule.Rule, f *rule.File) []resolve.ImportSpec {
	return nil
}

// Embeds returns a list of labels of rules that the given rule embeds. If a
// rule is embedded by another importable rule of the same language, only the
// embedding rule will be indexed. The embedding rule will inherit the imports
// of the embedded rule. Since SkyLark doesn't support embedding this should
// always return nil.
func (*GoModulesLanguage) Embeds(r *rule.Rule, from label.Label) []label.Label { return nil }

// Resolve translates imported libraries for a given rule into Bazel
// dependencies. Information about imported libraries is returned for each rule
// generated by language.GenerateRules in language.GenerateResult.Imports.
// Resolve generates a "deps" attribute (or the appropriate language-specific
// equivalent) for each import according to language-specific rules and
// heuristics.
func (l *GoModulesLanguage) Resolve(
	c *config.Config,
	ix *resolve.RuleIndex,
	rc *repo.RemoteCache,
	r *rule.Rule,
	importsRaw interface{},
	from label.Label,
) {
	l.goModules.resolve(from, r, l.goModule.index)
}

// GenerateRules extracts build metadata from source files in a directory.
// GenerateRules is called in each directory where an update is requested in
// depth-first post-order.
//
// args contains the arguments for GenerateRules. This is passed as a struct to
// avoid breaking implementations in the future when new fields are added.
//
// A GenerateResult struct is returned. Optional fields may be added to this
// type in the future.
//
// Any non-fatal errors this function encounters should be logged using
// log.Print.
func (l *GoModulesLanguage) GenerateRules(args language.GenerateArgs) language.GenerateResult {
	if l.targetPkg == "" {
		log.Printf("%s: skipping generate: rel=%s", l.name, args.Rel)
		return language.GenerateResult{}
	}

	log.Printf("%s: generate: rel=%s", l.name, args.Rel)

	var rules []*rule.Rule

	if r, ok := l.goModule.generate(args.Rel, args); ok {
		rules = append(rules, r)
	}
	if r, ok := l.goModules.generate(args.Rel); ok {
		rules = append(rules, r)
	}

	imports := make([]any, len(rules))
	for i, r := range rules {
		imports[i] = r.PrivateAttr(config.GazelleImportsKey)
	}

	log.Printf("%s: rules: %v", l.name, rules)

	return language.GenerateResult{
		Gen:     rules,
		Imports: imports,
	}
}
