#!/usr/bin/env bash

@@GENERATED_MESSAGE@@

set -euo pipefail

RUNNER_LABEL=@@RUNNER_LABEL@@
GENCOPY_LABEL=@@GENCOPY_LABEL@@
GENCOPY_SHORT_PATH=@@GENCOPY_SHORT_PATH@@
CONFIG_SHORT_PATH=@@CONFIG_SHORT_PATH@@

# env
# set -x
# echo "PWD: $PWD"
# find .
# find ..

# Get the directory of the current script (part of the runfiles tree)
script_dir=$(dirname "$0")

# find_runfile prints the location of a runfile in the source workspace,
# either by reading the symbolic link or reading the runfiles manifest.
function find_runfile {
  local runfile=$1
  if [ -L "$runfile" ]; then
    readlink "$runfile"
    return
  fi
  if [ -f "$runfile" ]; then
    echo "$runfile"
    return
  fi
  runfile=$(echo "$runfile" | sed -e 's!^\(\.\./\|external/\)!!')
  if grep -q "^$runfile" MANIFEST; then
    grep "^$runfile" MANIFEST | head -n 1 | cut -d' ' -f2
    return
  fi
  # printing nothing indicates failure
}

# If arguments were provided on the command line, either replace or augment
# the generated args.
if [ "${1-}" = "-args" ]; then
  shift
  ARGS+=("$@")
elif [ $# -ne 0 ]; then
  ARGS=("$@")
fi

# Note that we don't change directories first; if we did, Generator wouldn't be
# able to find runfiles, and some extensions rely on that. Generator can use
# BUILD_WORKSPACE_DIRECTORY to interpret relative paths on the command line.
GENCOPY_path=$(find_runfile "$GENCOPY_SHORT_PATH")
if [ -z "$GENCOPY_path" ]; then
  echo "error: could not locate gencopy binary" >&2
  exit 1
fi

CONFIG_path=$(find_runfile "$CONFIG_SHORT_PATH")
if [ -z "$CONFIG_path" ]; then
  echo "error: could not locate gencopy configuration file" >&2
  exit 1
fi

"$GENCOPY_path" \
  -config="$CONFIG_path" \
  -workspace_root_directory="${BUILD_WORKSPACE_DIRECTORY:-""}"