// protoresolve.go is a language extension that creates a csv of rule srcs in a
// generate run.  The file can be read by the protobuf extension and used by the
// cross resolver.
package protoresolve

import (
	"flag"
	"fmt"
	"log"
	"os"
	"path"
	"reflect"
	"strings"
	"unsafe"

	"github.com/bazelbuild/bazel-gazelle/config"
	"github.com/bazelbuild/bazel-gazelle/label"
	"github.com/bazelbuild/bazel-gazelle/language"
	"github.com/bazelbuild/bazel-gazelle/repo"
	"github.com/bazelbuild/bazel-gazelle/resolve"
	"github.com/bazelbuild/bazel-gazelle/rule"

	"github.com/stackb/rules_proto/pkg/protoc"
	pi "github.com/stackb/rules_proto/pkg/protoresolve"
)

const (
	// protoResolveRulesAttr is used to stash a list of proto_library rules in a
	// private attr for later deps resolution.
	protoResolveRulesAttr = "_proto_resolve"
)

// NewProtoIndexLanguage create a new protoIndexLanguage Gazelle extension implementation.
func NewProtoIndexLanguage(name string) *protoIndexLanguage {
	return &protoIndexLanguage{
		name:          name,
		crossResolver: pi.NewIndex(),
	}
}

// protoIndexLanguage implements language.Language.
type protoIndexLanguage struct {
	name string
	// repoName is the name of this external repository
	repoName string
	// indexWriteFilename is the name of the file to create.  If "", skip writing the
	// file.
	indexWriteFilename string
	// indexReadFilenames is a comma-separate files that contains proto index csv content.
	indexReadFilenames string
	// indexFile is the file; it is open for writing while gazelle is running.
	// The file is closed after the root BUILD file is visited.
	indexFile *os.File
	// crossResolver used for resolving proto imports to their labels.
	crossResolver *pi.Index
}

// Name returns the name of the language. This should be a prefix of the kinds
// of rules generated by the language, e.g., "go" for the Go extension since it
// generates "go_library" rules.
func (pl *protoIndexLanguage) Name() string { return pl.name }

// The following methods are implemented to satisfy the
// https://pkg.go.dev/github.com/bazelbuild/bazel-gazelle/resolve?tab=doc#Resolver
// interface, but are otherwise unused.
func (pl *protoIndexLanguage) RegisterFlags(fs *flag.FlagSet, cmd string, c *config.Config) {
	fs.StringVar(&pl.indexReadFilenames, "proto_repository_index_files", "", "index files to parse")
	fs.StringVar(&pl.indexWriteFilename, "proto_repository_index_output_file", "", "filename where index should be written")
	fs.StringVar(&pl.repoName, "proto_repo_name", "", "external name of this repository")
}

func (pl *protoIndexLanguage) CheckFlags(fs *flag.FlagSet, c *config.Config) error {
	// Populate the cross resolver with these well known labels
	if err := pl.crossResolver.ParseCSVReader(strings.NewReader(`
@com_google_protobuf//:any_proto,proto_library,srcs,google/protobuf/any.proto
@com_google_protobuf//:api_proto,proto_library,srcs,google/protobuf/api.proto
@com_google_protobuf//:compiler_plugin_proto,proto_library,srcs,google/protobuf/compiler/plugin.proto
@com_google_protobuf//:descriptor_proto,proto_library,srcs,google/protobuf/descriptor.proto
@com_google_protobuf//:duration_proto,proto_library,srcs,google/protobuf/duration.proto
@com_google_protobuf//:empty_proto,proto_library,srcs,google/protobuf/empty.proto
@com_google_protobuf//:field_mask_proto,proto_library,srcs,google/protobuf/field_mask.proto
@com_google_protobuf//:source_context_proto,proto_library,srcs,google/protobuf/source_context.proto
@com_google_protobuf//:struct_proto,proto_library,srcs,google/protobuf/struct.proto
@com_google_protobuf//:timestamp_proto,proto_library,srcs,google/protobuf/timestamp.proto
@com_google_protobuf//:type_proto,proto_library,srcs,google/protobuf/type.proto
@com_google_protobuf//:wrappers_proto,proto_library,srcs,google/protobuf/wrappers.proto
`)); err != nil {
		return fmt.Errorf("loading builtins: %w", err)
	}

	if pl.indexReadFilenames != "" {
		for _, filename := range strings.Split(pl.indexReadFilenames, ",") {
			if err := pl.crossResolver.ParseCSVFile(filename); err != nil {
				return fmt.Errorf("loading -proto_repository_index %s: %w", filename, err)
			}
		}
	}

	if pl.indexWriteFilename != "" {
		f, err := os.Create(pl.indexWriteFilename)
		if err != nil {
			return fmt.Errorf("%s: could not create index file: %w", pl.name, err)
		}
		fmt.Fprintf(f, "# GENERATED FILE, DO NOT EDIT (created by gazelle extension %s)\n", pl.name)
		fmt.Fprintf(f, "# label,kind,attr,value\n")

		pl.indexFile = f
	}
	return nil
}

func (*protoIndexLanguage) KnownDirectives() []string { return nil }

// Configure implements config.Configurer
func (pl *protoIndexLanguage) Configure(c *config.Config, rel string, f *rule.File) {
	if rel != "" {
		return
	}

	// The resolve config has already processed resolve directives, and there's
	// no public API. Take somewhat extreme measures to augment it's internal
	// override list via unsafe memory reallocation.
	overrides := make([]overrideSpec, 0)
	for _, e := range pl.crossResolver.GetEntriesByKind("proto_library") {
		if e.Attr != "srcs" {
			continue
		}
		overrides = append(overrides, overrideSpec{
			imp: resolve.ImportSpec{
				Lang: "proto",
				Imp:  e.Value,
			},
			lang: "proto",
			dep:  e.Label,
		})
	}
	if len(overrides) > 0 {
		rewriteResolveConfigOverrides(getResolveConfig(c), overrides)
	}
}

// Kinds returns a map of maps rule names (kinds) and information on how to
// match and merge attributes that may be found in rules of those kinds. All
// kinds of rules generated for this language may be found here.
func (*protoIndexLanguage) Kinds() map[string]rule.KindInfo {
	kinds := make(map[string]rule.KindInfo)
	kinds["proto_resolve"] = rule.KindInfo{
		ResolveAttrs: map[string]bool{"deps": true},
	}
	return kinds

}

// Loads returns .bzl files and symbols they define. Every rule generated by
// GenerateRules, now or in the past, should be loadable from one of these
// files.
func (pl *protoIndexLanguage) Loads() []rule.LoadInfo { return nil }

// Fix repairs deprecated usage of language-specific rules in f. This is called
// before the file is indexed. Unless c.ShouldFix is true, fixes that delete or
// rename rules should not be performed.
func (*protoIndexLanguage) Fix(c *config.Config, f *rule.File) {
}

// Imports returns a list of ImportSpecs that can be used to import the rule r.
// This is used to populate RuleIndex.
//
// If nil is returned, the rule will not be indexed. If any non-nil slice is
// returned, including an empty slice, the rule will be indexed.
func (pl *protoIndexLanguage) Imports(c *config.Config, r *rule.Rule, f *rule.File) []resolve.ImportSpec {
	return nil
}

// Embeds returns a list of labels of rules that the given rule embeds. If a
// rule is embedded by another importable rule of the same language, only the
// embedding rule will be indexed. The embedding rule will inherit the imports
// of the embedded rule. Since SkyLark doesn't support embedding this should
// always return nil.
func (*protoIndexLanguage) Embeds(r *rule.Rule, from label.Label) []label.Label { return nil }

// Resolve translates imported libraries for a given rule into Bazel
// dependencies. Information about imported libraries is returned for each rule
// generated by language.GenerateRules in language.GenerateResult.Imports.
// Resolve generates a "deps" attribute (or the appropriate language-specific
// equivalent) for each import according to language-specific rules and
// heuristics.
func (pl *protoIndexLanguage) Resolve(
	c *config.Config,
	ix *resolve.RuleIndex,
	rc *repo.RemoteCache,
	r *rule.Rule,
	importsRaw interface{},
	from label.Label,
) {
	if r.Kind() == "proto_resolve" && r.Name() == "proto_libraries" {
		pl.resolveSpecialFilegroup(c, ix, rc, r, importsRaw, from)
	}
}

func (pl *protoIndexLanguage) resolveSpecialFilegroup(
	c *config.Config,
	ix *resolve.RuleIndex,
	rc *repo.RemoteCache,
	r *rule.Rule,
	importsRaw interface{},
	from label.Label,
) {
	libs := r.PrivateAttr(protoResolveRulesAttr).([]*rule.Rule)
	for _, lib := range libs {
		newDeps := make([]string, 0)
		imports := lib.PrivateAttr(config.GazelleImportsKey).([]string)
		for _, v := range imports {
			result := pl.crossResolver.CrossResolve(c, ix, resolve.ImportSpec{Lang: "proto", Imp: v}, "proto")
			if len(result) > 0 {
				first := result[0]
				if first.Label != from {
					newDeps = append(newDeps, first.Label.String())
				}
			}
		}
		if len(newDeps) > 0 {
			lib.SetAttr("deps", protoc.DeduplicateAndSort(newDeps))
		}
	}
	r.Delete()
}

// CrossResolve provides dependency resolution logic for the 'proto' extension.
func (pl *protoIndexLanguage) CrossResolve(c *config.Config, ix *resolve.RuleIndex, imp resolve.ImportSpec, lang string) []resolve.FindResult {
	return pl.crossResolver.CrossResolve(c, ix, imp, lang)
}

// GenerateRules extracts build metadata from source files in a directory.
// GenerateRules is called in each directory where an update is requested in
// depth-first post-order.
//
// args contains the arguments for GenerateRules. This is passed as a struct to
// avoid breaking implementations in the future when new fields are added.
//
// A GenerateResult struct is returned. Optional fields may be added to this
// type in the future.
//
// Any non-fatal errors this function encounters should be logged using
// log.Print.
func (pl *protoIndexLanguage) GenerateRules(args language.GenerateArgs) language.GenerateResult {
	libs := make([]*rule.Rule, 0)

	for _, r := range args.OtherGen {
		// fully-qualified label
		l := label.New(pl.repoName, args.Rel, r.Name())
		// write srcs entries
		srcs := r.AttrStrings("srcs")
		for _, v := range srcs {
			fmt.Fprintf(pl.indexFile, "%s,%s,%s,%s\n", l.String(), r.Kind(), "srcs", path.Join(args.Rel, v))
		}
		// write deps entries
		deps := r.AttrStrings("deps")
		for _, v := range deps {
			fmt.Fprintf(pl.indexFile, "%s,%s,%s,%s\n", l.String(), r.Kind(), "deps", path.Join(args.Rel, v))
		}
		// write importpath entry
		importpath := r.AttrString("importpath")
		if importpath != "" {
			fmt.Fprintf(pl.indexFile, "%s,%s,%s,%s\n", l.String(), r.Kind(), "importpath", importpath)
		}

		// if this is a proto_library, add internal cross-references
		if r.Kind() == "proto_library" {
			libs = append(libs, r)
			internalLabel := label.New("", l.Pkg, l.Name)
			for _, src := range r.AttrStrings("srcs") {
				pl.crossResolver.AddEntry(&pi.IndexEntry{
					Kind:  "proto_library",
					Label: internalLabel,
					Attr:  "srcs",
					Value: path.Join(args.Rel, src),
				})
			}
		}
	}

	// once we are at the root of the repo close the index file
	if args.Rel == "" {
		if pl.indexFile != nil {
			if err := pl.indexFile.Close(); err != nil {
				log.Fatalf("%s: could not close index file: %v", pl.indexWriteFilename, err)
			}
		}
	}

	var result language.GenerateResult

	if len(libs) > 0 {
		// This rule is *only* used to trigger a Resolve() callback such that we
		// can process the proto_library rules we've captured here; the rule
		// itself is always deleted from the file.
		resolveRule := rule.NewRule("proto_resolve", "proto_libraries")
		resolveRule.SetPrivateAttr(protoResolveRulesAttr, libs)

		result.Gen = append(result.Gen, resolveRule)
	}

	result.Imports = make([]interface{}, len(result.Gen))
	for i, rule := range result.Gen {
		result.Imports[i] = rule.PrivateAttr(config.GazelleImportsKey)
	}

	return result
}

// getResolveConfig returns the resolve.resolveConfig
func getResolveConfig(c *config.Config) interface{} {
	return c.Exts["_resolve"]
}

// rewriteResolveConfigOverrides reads the existing private attribute and
// appends more overrides.
func rewriteResolveConfigOverrides(rc interface{}, more []overrideSpec) {
	rcv := reflect.ValueOf(rc).Elem()
	val := reflect.Indirect(rcv)
	member := val.FieldByName("overrides")
	ptrToOverrides := unsafe.Pointer(member.UnsafeAddr())
	overrides := (*[]overrideSpec)(ptrToOverrides)

	// create new array
	newOverrides := make([]overrideSpec, 0)
	newOverrides = append(newOverrides, *overrides...)
	newOverrides = append(newOverrides, more...)

	// reassign memory value
	*overrides = newOverrides
}

// overrideSpec is a copy of the same private type in resolve/config.go.  It must be
// kept in sync with the original to avoid discrepancy with the expected memory
// layout.
type overrideSpec struct {
	imp  resolve.ImportSpec
	lang string
	dep  label.Label
}
