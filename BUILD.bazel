load("@bazel_gazelle//:def.bzl", "gazelle", "gazelle_binary")
load("@com_github_bazelbuild_buildtools//buildifier:def.bzl", "buildifier")

# ----------------------------------------------------
# Buildifier
# ----------------------------------------------------
buildifier(name = "buildifier")

# ----------------------------------------------------
# Gazelle
# ----------------------------------------------------
# gazelle:prefix github.com/stackb/rules_proto
# gazelle:resolve go github.com/bazelbuild/buildtools/build @com_github_bazelbuild_buildtools//build:go_default_library
# gazelle:exclude vendor
# gazelle:exclude node_modules

gazelle_binary(
    name = "gazelle-protobuf",
    languages = [
        # NOTE: order matters here.  Gazelle will respect the ordering of
        # languages which will impact the population of 'OtherGen', so
        # //language/protobuf MUST come after language/proto.
        "@bazel_gazelle//language/go",
        "@bazel_gazelle//language/proto",
        "//language/protobuf",
    ],
    visibility = ["//visibility:public"],
)

gazelle(
    name = "gazelle",
    gazelle = ":gazelle-protobuf",
)

gazelle(
    name = "update_go_deps",
    args = [
        "-from_file=go.mod",
        "-to_macro=go_deps.bzl%go_deps",
        "-build_file_proto_mode=disable_global",
        "-prune=true",
    ],
    command = "update-repos",
)

# ----------------------------------------------------
# Test-Related
# ----------------------------------------------------

filegroup(
    name = "all_files",
    srcs = [
        "BUILD.bazel",
        "WORKSPACE",
        "go_deps.bzl",
        "//deps:all_files",
        "//pkg:all_files",
        "//plugin:all_files",
        "//rules:all_files",
        "//third_party:all_files",
        "//toolchain:all_files",
    ],
    visibility = ["//visibility:public"],
)

# ----------------------------------------------------
# Well Known Types for typescript
# ----------------------------------------------------

# gazelle:ignore
load("@build_stack_rules_proto//rules/ts:proto_ts_library.bzl", "proto_ts_library")
load("@build_stack_rules_proto//rules:proto_compile.bzl", "proto_compile")

WELL_KNOWN_PROTO_MAP = {
    "any": ("google/protobuf/any.ts", []),
    "api": (
        "google/protobuf/api.ts",
        [
            "source_context",
            "type",
        ],
    ),
    "compiler_plugin": (
        "google/protobuf/compiler/plugin.ts",
        ["descriptor"],
    ),
    "descriptor": ("google/protobuf/descriptor.ts", []),
    "duration": ("google/protobuf/duration.ts", []),
    "empty": ("google/protobuf/empty.ts", []),
    "field_mask": ("google/protobuf/field_mask.ts", []),
    "source_context": ("google/protobuf/source_context.ts", []),
    "struct": ("google/protobuf/struct.ts", []),
    "timestamp": ("google/protobuf/timestamp.ts", []),
    "type": (
        "google/protobuf/type.ts",
        [
            "any",
            "source_context",
        ],
    ),
    "wrappers": ("google/protobuf/wrappers.ts", []),
}

[proto_compile(
    name = "wkt_" + proto[0] + "_proto_compile",
    options = {"@build_stack_rules_proto//plugin/stephenh/ts-proto:protoc-gen-ts-proto": [
        "emitImportedFiles=false",
        "esModuleInterop=true",
    ]},
    outputs = [
        proto[1][0],
    ],
    plugins = ["@build_stack_rules_proto//plugin/stephenh/ts-proto:protoc-gen-ts-proto"],
    proto = "@com_google_protobuf//:" + proto[0] + "_proto",
) for proto in WELL_KNOWN_PROTO_MAP.items()]

proto_ts_library_deps = [
    "@npm_tsc//long",
    "@npm_tsc//protobufjs",
]

[proto_ts_library(
    name = "wkt_" + proto[0] + "_ts_proto",
    srcs = [
        proto[1][0],
    ],
    args = [
        "--allowSyntheticDefaultImports",
        "--downlevelIteration",
        "--lib ES2015",
    ],
    tsc = "@npm_tsc//typescript/bin:tsc",
    visibility = ["//visibility:public"],
    deps = proto_ts_library_deps + ["wkt_" + dep + "_ts_proto" for dep in proto[1][1]],
) for proto in WELL_KNOWN_PROTO_MAP.items()]
