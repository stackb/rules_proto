load("@io_bazel_rules_go//go:def.bzl", "go_test")
load("//rules:example.bzl", "gazelle_testdata_example")

# gazelle:exclude testdata

genrule(
    name = "gazelle_tool",
    outs = ["gazelle"],
    cmd = "cp $(location //:gazelle-protobuf) $@",
    executable = True,
    tools = ["//:gazelle-protobuf"],
)

go_test(
    name = "golden_test",
    srcs = ["golden_test.go"],
    data = [":gazelle"] + glob(["testdata/**"]),
    deps = ["//pkg/goldentest"],
)

# the "extra_module_bazel_content" block is fed to the ModuleFileSuffix field of
# the bazel_testing.Args struct and ultimately appended to a MODULE.bazel file
# by the bazel_testing library.  For reference, that content looks like:

# MODULE.bazel (/private/var/tmp/_bazel_pcj/092d6dadaf86f07590903c45033f576e/bazel_testing/bazel_go_test/main/MODULE.bazel)
# bazel_dep(name = "build_stack_rules_proto", repo_name = "build_stack_rules_proto")
# local_path_override(
#     module_name = "build_stack_rules_proto",
#     path = "/private/var/tmp/_bazel_pcj/092d6dadaf86f07590903c45033f576e/bazel_testing/bazel_go_test/tested_repo",
# )
#
extra_module_bazel_content = """
bazel_dep(name = "rules_go", version = "0.57.0", repo_name = "io_bazel_rules_go")

# -------------------------------------------------------------------
# Configuration: Go
# -------------------------------------------------------------------

go_sdk = use_extension("@io_bazel_rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.23.1")

# -------------------------------------------------------------------
# Configuration: protobuf
# -------------------------------------------------------------------

register_toolchains("@build_stack_rules_proto//toolchain:prebuilt")
"""

gazelle_testdata_example(
    name = "cpp",
    srcs = glob(["testdata/cpp/*"]),
    extra_module_bazel_content = extra_module_bazel_content,
)

gazelle_testdata_example(
    name = "java",
    srcs = glob(["testdata/java/*"]),
    extra_module_bazel_content = extra_module_bazel_content,
)

gazelle_testdata_example(
    name = "python",
    srcs = glob(["testdata/python/*"]),
    extra_module_bazel_content = extra_module_bazel_content,
)

gazelle_testdata_example(
    name = "ruby",
    srcs = glob(["testdata/ruby/*"]),
    extra_module_bazel_content = extra_module_bazel_content,
)

gazelle_testdata_example(
    name = "csharp",
    srcs = glob(["testdata/csharp/*"]),
    extra_module_bazel_content = extra_module_bazel_content,
)

gazelle_testdata_example(
    name = "objc",
    srcs = glob(["testdata/objc/*"]),
    extra_module_bazel_content = extra_module_bazel_content,
)

gazelle_testdata_example(
    name = "commonjs",
    srcs = glob(["testdata/commonjs/*"]),
    extra_module_bazel_content = extra_module_bazel_content,
)

gazelle_testdata_example(
    name = "go",
    srcs = glob(["testdata/go/*"]),
    extra_module_bazel_content = extra_module_bazel_content,
)

gazelle_testdata_example(
    name = "gomerge",
    srcs = glob(["testdata/gomerge/*"]),
    extra_module_bazel_content = extra_module_bazel_content,
)

gazelle_testdata_example(
    name = "goembed",
    srcs = glob(["testdata/goembed/**/*"]),
    extra_module_bazel_content = extra_module_bazel_content + """
bazel_dep(name = "protobuf", version = "32.0", repo_name = "com_google_protobuf")
""",
    strip_prefix = "example/golden/testdata/goembed",
)

gazelle_testdata_example(
    name = "proto_repository",
    srcs = glob(["testdata/proto_repository/**/*"]),
    extra_module_bazel_content = extra_module_bazel_content + """
bazel_dep(name = "gazelle", version = "0.45.0", repo_name = "bazel_gazelle")

proto_repository = use_extension("@build_stack_rules_proto//extensions:proto_repository.bzl", "proto_repository", dev_dependency = True)
proto_repository.archive(
    name = "protoapis",
    build_directives = [
        "gazelle:exclude testdata",
        "gazelle:exclude google/protobuf/compiler/ruby",
        "gazelle:exclude google/protobuf/util/internal/testdata",
        "gazelle:proto_language go enable true",
    ],
    build_file_generation = "clean",
    build_file_proto_mode = "file",
    cfgs = ["//:rules_proto_config.yaml"],
    deleted_files = [
        "google/protobuf/*test*.proto",
        "google/protobuf/*unittest*.proto",
        "google/protobuf/compiler/cpp/*test*.proto",
        "google/protobuf/util/*test*.proto",
        "google/protobuf/util/*unittest*.proto",
        "google/protobuf/util/json_format*.proto",
    ],
    sha256 = "4514213c25a5b87e1948aeeb4c40effc55d11d60871ca5b903a2779005fc48ce",
    strip_prefix = "protobuf-9650e9fe8f737efcad485c2a8e6e696186ae3862/src",
    type = "zip",
    urls = [
        "https://codeload.github.com/protocolbuffers/protobuf/zip/9650e9fe8f737efcad485c2a8e6e696186ae3862",
    ],
)
proto_repository.archive(
    name = "googleapis",
    build_directives = [
        "gazelle:exclude google/example",
        "gazelle:exclude google/ads/googleads/v7/services",
        "gazelle:exclude google/ads/googleads/v8/services",
        "gazelle:proto_language go enabled true",
    ],
    build_file_generation = "clean",
    build_file_proto_mode = "file",
    cfgs = ["//:rules_proto_config.yaml"],
    imports = ["@protoapis//:imports.csv"],
    reresolve_known_proto_imports = True,
    sha256 = "95da12951c7d570980d5152f6cca9e1cb795ddc6b6dd7e9423bdffde28290f7a",
    strip_prefix = "googleapis-02710fa0ea5312d79d7fb986c9c9823fb41049a9",
    type = "zip",
    urls = [
        "https://codeload.github.com/googleapis/googleapis/zip/02710fa0ea5312d79d7fb986c9c9823fb41049a9",
    ],
)
use_repo(
    proto_repository,
    "googleapis",
    "protoapis",
)
""",
    strip_prefix = "example/golden/testdata/proto_repository",
    tags = ["manual"],  # FIXME(pcj)
    test_content = """
func TestRunGazelle(t *testing.T) {
	if err := bazel_testing.RunBazel("run", "//:gazelle"); err != nil {
		t.Fatal(err)
	}
	if err := bazel_testing.RunBazel("build", "..."); err != nil {
		t.Fatal(err)
	}
	if err := bazel_testing.RunBazel("test", "..."); err != nil {
		t.Fatal(err)
	}
}
""",
)

gazelle_testdata_example(
    name = "scala",
    srcs = glob(["testdata/scala/**/*"]),
    extra_module_bazel_content = "default.MODULE.bazel",
    strip_prefix = "example/golden/testdata/scala",
)

gazelle_testdata_example(
    name = "starlark_java",
    srcs = glob(["testdata/starlark_java/**/*"]),
    extra_module_bazel_content = extra_module_bazel_content + """
bazel_dep(name = "protobuf", version = "32.0", repo_name = "com_google_protobuf")
""",
    strip_prefix = "example/golden/testdata/starlark_java",
)

gazelle_testdata_example(
    name = "strip_import_prefix",
    srcs = glob(["testdata/strip_import_prefix/**/*"]),
    extra_module_bazel_content = extra_module_bazel_content + """
bazel_dep(name = "protobuf", version = "32.0", repo_name = "com_google_protobuf")
""",
    strip_prefix = "example/golden/testdata/strip_import_prefix",
    test_content = """
func TestBuild(t *testing.T) {
	if err := bazel_testing.RunBazel("build", "..."); err != nil {
		t.Fatal(err)
	}
}

func TestRunPyApp(t *testing.T) {
	if err := bazel_testing.RunBazel("run", "//module_app/app:app_py"); err != nil {
		t.Fatal(err)
	}
}
""",
)

gazelle_testdata_example(
    name = "proto_compiled_sources",
    srcs = glob(["testdata/proto_compiled_sources/**/*"]),
    extra_module_bazel_content = extra_module_bazel_content + """
bazel_dep(name = "protobuf", version = "32.0", repo_name = "com_google_protobuf")
""",
    strip_prefix = "example/golden/testdata/proto_compiled_sources",
    test_content = """

func TestUpdate(t *testing.T) {
    var want = `proto_compile_gencopy_run rule //:assets
proto_library rule //api/v1:api_v1_proto
proto_compile rule //api/v1:api_v1_python_compiled_sources
proto_compile_gencopy_run rule //api/v1:api_v1_python_compiled_sources.update
proto_compile_gencopy_test rule //api/v1:api_v1_python_compiled_sources_test
proto_library rule //src/idl:svc_proto
proto_compile rule //src/idl:svc_python_compiled_sources
proto_compile_gencopy_run rule //src/idl:svc_python_compiled_sources.update
proto_compile_gencopy_test rule //src/idl:svc_python_compiled_sources_test
`

    // document query outputs
	if got, err := bazel_testing.BazelOutput("query", "--output=label_kind", "..."); err != nil {
		t.Fatal(err)
	} else {
        if diff := cmp.Diff(want, string(got)); diff != "" {
            t.Fatalf("query mismatch (-want +got): %s", diff)
        }
    }

    // generated files should not initially exist
    if err := os.Remove("api/v1/v1_pb2.py"); err == nil {
		t.Fatal("remove should have failed")
    }
    if err := os.Remove("src/idl/svc_pb2.py"); err == nil {
		t.Fatal("remove should have failed")
    }

    // assert test initially fails
	if err := bazel_testing.RunBazel("test", "//api/v1:api_v1_python_compiled_sources_test"); err == nil {
		t.Fatal("expected initial test to fail!")
	}

    // copy the files in place
	if err := bazel_testing.RunBazel("run", "//api/v1:api_v1_python_compiled_sources.update"); err != nil {
		t.Fatal(err)
	}
	if err := bazel_testing.RunBazel("run", "//src/idl:svc_python_compiled_sources.update"); err != nil {
		t.Fatal(err)
	}

    // tests should now pass
	if err := bazel_testing.RunBazel("test", "..."); err != nil {
		t.Fatal(err)
	}

    // delete the generated files
    if err := os.Remove("api/v1/v1_pb2.py"); err != nil {
		t.Fatal(err)
    }
    if err := os.Remove("src/idl/svc_pb2.py"); err != nil {
		t.Fatal(err)
    }

    // document that running the proto_compile_assets rule also copies both files in place
	if err := bazel_testing.RunBazel("run", "//:assets"); err != nil {
		t.Fatal(err)
	}

    // test should still pass
	if err := bazel_testing.RunBazel("test", "..."); err != nil {
		t.Fatal(err)
	}
}
""",
)

filegroup(
    name = "all_files",
    testonly = True,
    srcs = ["BUILD.bazel"] + glob(["*.go"]),
    visibility = ["//:__pkg__"],
)
